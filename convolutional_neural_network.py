# -*- coding: utf-8 -*-
"""convolutional_neural_network.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wySTlusxjlFNRsRk3syHIFdeKc603uBD

# Convolutional Neural Network

### Importing the libraries
"""

import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator

tf.__version__

"""## Part 1 - Data Preprocessing

### Preprocessing the Training set
"""

# transformation applying only for training set images to avoid overfitting(very high accuracy on traing set 98% and 70% in test set)
#shift some of the pixel , rotate,zoom in and outto modify the images - image augumentaion ()

train_datagen = ImageDataGenerator(rescale = 1./255, #feature scaling is applied by dividing all pixel by 255
                                   shear_range = 0.2,#transformations
                                   zoom_range = 0.2,#transformations
                                   horizontal_flip = True)#transformations


training_set = train_datagen.flow_from_directory('dataset/training_set',
                                                 target_size = (64, 64), #reducing the image size to make training fast
                                                 batch_size = 32, # how many images we want in each batch
                                                 class_mode = 'binary') #we want cat or dog

"""### Preprocessing the Test set"""

test_datagen = ImageDataGenerator(rescale = 1./255)
test_set = test_datagen.flow_from_directory('dataset/test_set',
                                            target_size = (64, 64),
                                            batch_size = 32,
                                            class_mode = 'binary')

"""## Part 2 - Building the CNN

### Initialising the CNN
"""

cnn = tf.keras.models.Sequential()

"""### Step 1 - Convolution"""

# no of feature detector in image we want apply is filters
# input_shape=[64, 64, 3] is RGB
# kernel size is 3 *3
cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))

"""### Step 2 - Pooling"""

# pool size is frame size 2 * 2
#which number of pixel it move to right  to get maxpool is 2
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

"""### Adding a second convolutional layer"""

cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

"""### Step 3 - Flattening"""

cnn.add(tf.keras.layers.Flatten())

"""### Step 4 - Full Connection"""

cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))

"""### Step 5 - Output Layer"""

cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

"""## Part 3 - Training the CNN

### Compiling the CNN
"""

cnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""### Training the CNN on the Training set and evaluating it on the Test set"""

cnn.fit(x = training_set, validation_data = test_set, epochs = 25)

"""## Part 4 - Making a single prediction"""

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('dataset/single_prediction/cat_or_dog_1.jpg', target_size = (64, 64)) #load single image
test_image = image.img_to_array(test_image) # convert image to array
test_image = np.expand_dims(test_image, axis = 0) #cnn is trained by batches of images so it has extra dimension so we want o deploy our image it should be in batch so we add extra fake dimension
result = cnn.predict(test_image)
training_set.class_indices
if result[0][0] == 1:
  prediction = 'dog'
else:
  prediction = 'cat'

print(prediction)